{"version":3,"file":"static/js/87.7b5060be.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@remix-run/router/history.ts","../node_modules/@remix-run/router/utils.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@remix-run/router/router.ts","../node_modules/react-router-dom/index.tsx","../node_modules/react-router-dom/dom.ts","../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts","../node_modules/react-router/lib/use-sync-external-store-shim/index.ts","../node_modules/react-router/lib/context.ts","../node_modules/react-router/lib/hooks.tsx","../node_modules/react-router/lib/components.tsx","../node_modules/react-router/index.ts","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      to,\n      future,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      href,\n      future,\n      opts,\n      true\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  future: FutureConfig,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_detectErrorBoundary as detectErrorBoundary,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + to)\n          : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n","import type { FormEncType, HTMLFormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n","/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n","import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own&nbsp;\n          <code style={codeStyles}>ErrorBoundary</code> prop on&nbsp;\n          <code style={codeStyles}>&lt;Route&gt;</code>\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      if (match.route.ErrorBoundary) {\n        errorElement = <match.route.ErrorBoundary />;\n      } else if (match.route.errorElement) {\n        errorElement = match.route.errorElement;\n      } else {\n        errorElement = <DefaultErrorComponent />;\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode = outlet;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{ outlet, matches }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(\n    () => () => router.deleteBlocker(blockerKey),\n    [router, blockerKey]\n  );\n\n  // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n  return state.blockers.get(blockerKey) || blocker;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  let getState = React.useCallback(() => router.state, [router]);\n\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    getState,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    getState\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? <Routes /> : fallbackElement}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n","import type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Blocker,\n  BlockerFunction,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n  LazyRouteFunction,\n  FutureConfig,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  RelativeRoutingType,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker as unstable_Blocker,\n  BlockerFunction as unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker as unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nfunction detectErrorBoundary(route: RouteObject) {\n  if (__DEV__) {\n    if (route.Component && route.element) {\n      warning(\n        false,\n        \"You should not include both `Component` and `element` on your route - \" +\n          \"`element` will be ignored.\"\n      );\n    }\n    if (route.ErrorBoundary && route.errorElement) {\n      warning(\n        false,\n        \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" +\n          \"`errorElement` will be ignored.\"\n      );\n    }\n  }\n\n  // Note: this check also occurs in createRoutesFromChildren so update\n  // there if you change this\n  return Boolean(route.ErrorBoundary) || Boolean(route.errorElement);\n}\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    future?: FutureConfig;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  detectErrorBoundary as UNSAFE_detectErrorBoundary,\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}"],"names":["_construct","Parent","args","Class","isNativeReflectConstruct","Reflect","construct","bind","a","push","apply","instance","Function","setPrototypeOf","prototype","arguments","_wrapNativeSuper","_cache","Map","undefined","fn","toString","call","indexOf","TypeError","has","get","set","Wrapper","getPrototypeOf","this","constructor","Object","create","value","enumerable","writable","configurable","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","err","normalCompletion","didErr","step","next","_e2","Action","ResultType","PopStateEventType","createBrowserHistory","options","getUrlBasedHistory","window","globalHistory","_window$location","location","createLocation","pathname","search","hash","state","usr","key","to","createPath","invariant","message","Error","warning","cond","console","warn","getHistoryState","index","idx","current","_extends","parsePath","Math","random","substr","_ref","_ref$pathname","_ref$search","_ref$hash","charAt","path","parsedPath","hashIndex","searchIndex","getLocation","createHref","validateLocation","_options2","_options2$window","document","defaultView","_options2$v5Compat","v5Compat","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","URL","replaceState","listen","addEventListener","removeEventListener","encodeLocation","url","Push","historyState","pushState","error","assign","replace","Replace","go","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","map","route","treePath","concat","_toConsumableArray","id","join","children","isIndexRoute","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","b","score","siblings","slice","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","computeScore","forEach","_route$path","includes","_step","_iterator","explodeOptionalSegments","exploded","segments","split","arr","_segments","arrayWithHoles","iterableToArray","nonIterableRest","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","_compilePath","paramNames","regexpSource","_","paramName","matcher","RegExp","compilePath","_compilePath2","_slicedToArray","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","_ref3","_ref3$search","_ref3$hash","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","_createClass","ErrorResponse","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","init","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","_defineProperty","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","blockers","pendingAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","subscriber","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","_step2","mergeLoaderData","_iterator2","deleteBlocker","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","opts","_normalizeNavigateOpt2","submission","currentLocation","nextLocation","userReplace","blockerKey","wrap","_context2","prev","abrupt","normalizeNavigateOptions","shouldBlockNavigation","updateBlocker","startNavigation","pendingError","sent","stop","_x4","_x5","_x6","_startNavigation","_callee3","routesToUse","loadingNavigation","_error","_getShortCircuitMatch2","notFoundMatches","_route","request","pendingActionData","actionOutput","_yield$handleLoaders","shortCircuited","_context3","abort","startUninterruptedRevalidation","saveScrollPosition","overrideNavigation","cancelActiveDeferreds","AbortController","createClientSideRequest","signal","findNearestBoundary","handleAction","pendingActionError","Request","handleLoaders","fetcherSubmission","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","actionMatch","boundaryMatch","_context4","interruptActiveLoads","getTargetMatch","type","method","routeId","callLoaderOrAction","aborted","isRedirectResult","startRedirectNavigation","isErrorResult","isDeferredResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_x20","_handleLoaders","_callee5","activeSubmission","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_yield$callLoadersAnd","results","loaderResults","fetcherResults","redirect","_processLoaderData","didAbortFetchLoads","_context5","getMatchesToLoad","rf","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","delete","findRedirect","processLoaderData","deferredData","subscribe","markFetchRedirectsDone","abortStaleFetchLoads","getFetcher","_handleFetcherAction","_callee6","requestMatches","_error2","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_context6","setFetcherError","add","isFetchActionRedirect","staleKey","r","_handleFetcherLoader","_callee7","_context7","resolveDeferredData","t0","_x33","_x34","_x35","_startRedirectNavigation","_callee8","_temp","_window","_ref6","redirectLocation","isDifferentBasename","redirectHistoryAction","_state$navigation","_context8","revalidate","_isFetchActionRedirect","_x36","_x37","_x38","_x39","_x40","_callLoadersAndMaybeResolveData","_callee9","currentMatches","fetchersToLoad","_context9","Promise","all","resolveDeferredResults","_cancelledDeferredRou","abortFetcher","deleteFetcher","controller","markFetchersDone","_step3","_iterator3","_step4","doneKeys","_iterator4","landedId","_step5","yeetedKeys","_iterator5","_step5$value","newBlocker","blocker","_ref2","size","entries","_entries","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","userMatches","createUseMatchesMatch","y","initialize","enableScrollRestoration","positions","getPosition","getKey","fetch","_normalizeNavigateOpt","_x21","_x22","_x23","_x24","_x25","_x26","handleFetcherAction","_x27","_x28","_x29","_x30","_x31","_x32","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","isFetcher","isSubmissionNavigation","isValidMethod","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","loadLazyRouteModule","_x60","_x61","_x62","_loadLazyRouteModule","_callee15","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_context16","_x63","_x64","_x65","_x66","_x67","_x68","_x69","_x70","_x71","_x72","_callLoaderOrAction","_callee16","isStaticRequest","isRouteRequest","requestContext","resultType","onReject","runHandler","handler","activeMatches","resolvedLocation","isSameBasename","contentType","_result$init","_result$init2","_context17","reject","abortPromise","race","context","finish","isResponse","headers","protocol","response","json","text","statusCode","isDeferredData","deferred","Headers","body","_step6","URLSearchParams","_iterator6","_step6$value","File","name","processRouteLoaderData","foundError","loaderHeaders","_processRouteLoaderDa","_revalidatingFetchers","newLoaderData","_step7","mergedLoaderData","_iterator7","hasOwnProperty","reverse","find","_temp4","_ref11","errorMessage","resolveData","_x73","_x74","_x75","_x76","_x77","_x78","_resolveDeferredResults","_callee17","_loop","_context19","isRevalidatingLoader","_context18","then","delegateYield","_x79","_x80","_x81","_resolveDeferredData","_callee18","unwrap","_context20","unwrappedData","getAll","v","handle","pathMatches","createBrowserRouter","parseHydrationData","UNSAFE_detectErrorBoundary","__staticRouterHydrationData","deserializeErrors","serialized","_i2","_entries$_i","val","__type","stack","Link","React","_ref4","ref","absoluteHref","onClick","relative","reloadDocument","target","_objectWithoutPropertiesLoose","_excluded","UNSAFE_NavigationContext","isExternal","targetUrl","useHref","internalOnClick","_ref9","replaceProp","useNavigate","useLocation","useResolvedPath","event","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","preventDefault","useLinkClickHandler","defaultPrevented","NavLink","_ref5","_ref5$ariaCurrent","ariaCurrentProp","_ref5$caseSensitive","_ref5$className","className","classNameProp","_ref5$end","styleProp","style","_excluded2","routerState","UNSAFE_DataRouterStateContext","navigator","nextLocationPathname","isActive","isPending","ariaCurrent","DataRouterHook","DataRouterStateHook","is","x","useState","useEffect","useLayoutEffect","useDebugValue","checkIfSnapshotChanged","inst","latestGetSnapshot","getSnapshot","prevValue","nextValue","useSyncExternalStore","DataRouterContext","DataRouterStateContext","AwaitContext","NavigationContext","LocationContext","RouteContext","outlet","RouteErrorContext","useInRouterContext","UNSAFE_invariant","_React$useContext","_useResolvedPath","joinedPathname","_React$useContext2","routePathnamesJson","UNSAFE_getPathContributingMatches","activeRef","parse","OutletContext","_temp2","DefaultErrorComponent","_state$errors","useDataRouterState","UseRouteError","useCurrentRouteId","useRouteError","lightgrey","preStyles","padding","backgroundColor","fontStyle","RenderErrorBoundary","_React$Component","props","_this","errorInfo","Provider","routeContext","component","RenderedRoute","dataRouterContext","static","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","_renderMatches","parentMatches","dataRouterState","renderedMatches","errorIndex","min","reduceRight","getChildren","Component","element","hookName","useRouteContext","thisRoute","AwaitRenderStatus","RouterProvider","fallbackElement","getState","Router","navigationType","Routes","Navigate","Outlet","useOutlet","Route","_props","_ref4$basename","basenameProp","_ref4$children","locationProp","_ref4$navigationType","_ref4$static","staticProp","navigationContext","_locationProp","_locationProp$pathnam","_locationProp$search","_locationProp$hash","_locationProp$state","_locationProp$key","locationContext","trailingPathname","dataRouterStateContext","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","useRoutes","createRoutesFromChildren","neverSettledPromise","asyncGeneratorStep","gen","resolve","_next","_throw","info","self","Constructor","_defineProperties","descriptor","defineProperty","protoProps","staticProps","_possibleConstructorReturn","ReferenceError","Derived","hasNativeReflectConstruct","Super","NewTarget","obj","_getPrototypeOf","__proto__","subClass","superClass","_isNativeReflectConstruct","sham","Proxy","valueOf","_iterableToArray","iter","exports","Op","hasOwn","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","record","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","_sent","dispatchException","methodName","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","awrap","async","object","skipTempReset","rootRecord","rval","exception","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","_setPrototypeOf","p","arrayLikeToArray","_toPropertyKey","input","hint","prim","toPrimitive","res","String","Number","_typeof"],"sourceRoot":""}